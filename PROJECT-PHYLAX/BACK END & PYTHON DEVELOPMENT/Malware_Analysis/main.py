import sqlite3
import time
import joblib
import pandas as pd
from ML_Model.extract_features import calculate_entropy
import warnings
import os
warnings.filterwarnings("ignore", category=UserWarning)

model_path = os.path.join(os.path.dirname(__file__), 'ML_Model', 'phylax_model.pkl')
model = joblib.load(model_path)

seen_ids = set()

def preprocess_row(row):
    protocol_map = {'TCP': 1, 'UDP': 2, 'ICMP': 3}
    row['protocol'] = protocol_map.get(row['protocol'], 0)

    def ip_to_int(ip):
        try:
            parts = ip.split('.')
            return sum([int(part) << (8 * (3 - i)) for i, part in enumerate(parts)])
        except:
            return 0
    
    row['source'] = ip_to_int(row['source'])
    row['destination'] = ip_to_int(row['destination'])

    try:
        row['payload_entropy'] = calculate_entropy(row['payload'])
    except:
        row['payload_entropy'] = 0.0

    return [row['source'], row['destination'], row['protocol'], row['length'], row['payload_entropy']]

def monitor_packets():
    db_path = os.path.join(os.path.dirname(__file__), 'database', 'phylax.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    while True:
        cursor.execute("SELECT id, source, destination, protocol, length, payload FROM packets")
        rows = cursor.fetchall()

        print(f"Fetched {len(rows)} packets. Seen {len(seen_ids)} packets so far.")

        for row in rows:
            rowid = row[0]
            if rowid not in seen_ids:
                seen_ids.add(rowid)

                packet_data = {
                    'source': row[1],
                    'destination': row[2],
                    'protocol': row[3],
                    'length': int(row[4]),
                    'payload': row[5]
                }

                try:
                    features = preprocess_row(packet_data)
                    prediction = model.predict([features])[0]

                    if prediction == 1:
                        print(f"[ALERT] Malware packet detected! Row ID: {rowid}")
                    else:
                        print(f"[OK] Benign packet ID {rowid}")

                except Exception as e:
                    print(f"[Error] Skipping packet ID {rowid} due to: {e}")

        time.sleep(5)

print("Starting real-time malware detection...")
monitor_packets()